# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: RootQuery
}

"A Sanity document"
interface Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
}

union AuthorReferenceOrSpan = AuthorReference | Span

union BlockOrImage = Block | Image

union BlockOrMainImage = Block | MainImage

type Author implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  bioRaw: JSON
  image: MainImage
  name: String
  slug: Slug
}

type AuthorReference {
  _key: String
  _type: String
  author: Author
}

type Barcode {
  _key: String
  _type: String
  barcode: String
  format: String
}

type Block {
  _key: String
  _type: String
  children: [Span]
  list: String
  style: String
}

type Category implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  description: String
  parents: [Category]
  slug: Slug
  title: String
}

type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}

type Geopoint {
  _key: String
  _type: String
  alt: Float
  lat: Float
  lng: Float
}

type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  crop: SanityImageCrop
  hotspot: SanityImageHotspot
}

type LocaleBlockContent {
  _key: String
  _type: String
  enRaw: JSON
  esRaw: JSON
  nbRaw: JSON
}

type LocaleString {
  _key: String
  _type: String
  en: String
  es: String
  nb: String
}

type LocaleText {
  _key: String
  _type: String
  en: String
  es: String
  nb: String
}

type MainImage {
  _key: String
  _type: String
  "Important for SEO and accessiblity."
  alt: String
  asset: SanityImageAsset
  caption: String
  crop: SanityImageCrop
  hotspot: SanityImageHotspot
}

type Post implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  authors: [AuthorReference]
  bodyRaw: JSON
  categories: [Category]
  excerptRaw: JSON
  mainImage: MainImage
  "This can be used to schedule post for publishing"
  publishedAt: DateTime
  slug: Slug
  "Titles should be catchy, descriptive, and not too long"
  title: String
}

type Product implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  blurb: LocaleString
  body: LocaleBlockContent
  categories: [Category]
  defaultProductVariant: ProductVariant
  slug: Slug
  tags: [String]
  title: String
  variants: [ProductVariant]
  vendor: Vendor
}

type ProductVariant {
  _key: String
  _type: String
  barcode: Barcode
  grams: Float
  images: [Image]
  price: Float
  sku: String
  taxable: Boolean
  title: String
}

type RootQuery {
  Author(
    "Author document ID"
    id: ID!
  ): Author
  Category(
    "Category document ID"
    id: ID!
  ): Category
  Post(
    "Post document ID"
    id: ID!
  ): Post
  Product(
    "Product document ID"
    id: ID!
  ): Product
  SanityFileAsset(
    "SanityFileAsset document ID"
    id: ID!
  ): SanityFileAsset
  SanityImageAsset(
    "SanityImageAsset document ID"
    id: ID!
  ): SanityImageAsset
  SiteSettings(
    "SiteSettings document ID"
    id: ID!
  ): SiteSettings
  Vendor(
    "Vendor document ID"
    id: ID!
  ): Vendor
  allAuthor(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [AuthorSorting!],
    where: AuthorFilter
  ): [Author!]!
  allCategory(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [CategorySorting!],
    where: CategoryFilter
  ): [Category!]!
  allPost(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [PostSorting!],
    where: PostFilter
  ): [Post!]!
  allProduct(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [ProductSorting!],
    where: ProductFilter
  ): [Product!]!
  allSanityFileAsset(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [SanityFileAssetSorting!],
    where: SanityFileAssetFilter
  ): [SanityFileAsset!]!
  allSanityImageAsset(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [SanityImageAssetSorting!],
    where: SanityImageAssetFilter
  ): [SanityImageAsset!]!
  allSiteSettings(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [SiteSettingsSorting!],
    where: SiteSettingsFilter
  ): [SiteSettings!]!
  allVendor(
    "Max documents to return"
    limit: Int,
    "Offset at which to start returning documents from"
    offset: Int,
    sort: [VendorSorting!],
    where: VendorFilter
  ): [Vendor!]!
}

type SanityAssetSourceData {
  _key: String
  _type: String
  "The unique ID for the asset within the originating source so you can programatically find back to it"
  id: String
  "A canonical name for the source this asset is originating from"
  name: String
  "A URL to find more information about this asset in the originating source"
  url: String
}

type SanityFileAsset implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  assetId: String
  description: String
  extension: String
  label: String
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  url: String
}

type SanityImageAsset implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  assetId: String
  description: String
  extension: String
  label: String
  metadata: SanityImageMetadata
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  url: String
}

type SanityImageCrop {
  _key: String
  _type: String
  bottom: Float
  left: Float
  right: Float
  top: Float
}

type SanityImageDimensions {
  _key: String
  _type: String
  aspectRatio: Float
  height: Float
  width: Float
}

type SanityImageHotspot {
  _key: String
  _type: String
  height: Float
  width: Float
  x: Float
  y: Float
}

type SanityImageMetadata {
  _key: String
  _type: String
  dimensions: SanityImageDimensions
  hasAlpha: Boolean
  isOpaque: Boolean
  location: Geopoint
  lqip: String
  palette: SanityImagePalette
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

type SiteSettings implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  "Publish an author and set a reference to them here."
  author: Author
  "Describe your blog for search engines and social media."
  description: String
  keywords: [String]
  title: String
}

type Slug {
  _key: String
  _type: String
  current: String
}

type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}

type Vendor implements Document {
  "Date the document was created"
  _createdAt: DateTime!
  "Document ID"
  _id: ID!
  _key: String
  "Current document revision"
  _rev: String!
  "Document type"
  _type: String!
  "Date the document was last modified"
  _updatedAt: DateTime!
  descriptionRaw: JSON
  logo: Image
  slug: Slug
  title: String
}

enum SortOrder {
  "Sorts on the value in ascending order."
  ASC
  "Sorts on the value in descending order."
  DESC
}

input AuthorFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  image: MainImageFilter
  name: StringFilter
  slug: SlugFilter
}

input AuthorReferenceFilter {
  _key: StringFilter
  _type: StringFilter
  author: AuthorFilter
}

input AuthorReferenceSorting {
  _key: SortOrder
  _type: SortOrder
}

input AuthorSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  image: MainImageSorting
  name: SortOrder
  slug: SlugSorting
}

input BarcodeFilter {
  _key: StringFilter
  _type: StringFilter
  barcode: StringFilter
  format: StringFilter
}

input BarcodeSorting {
  _key: SortOrder
  _type: SortOrder
  barcode: SortOrder
  format: SortOrder
}

input BooleanFilter {
  "Checks if the value is equal to the given input."
  eq: Boolean
  "Checks if the value is not equal to the given input."
  neq: Boolean
}

input CategoryFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  description: StringFilter
  slug: SlugFilter
  title: StringFilter
}

input CategorySorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  description: SortOrder
  slug: SlugSorting
  title: SortOrder
}

input DateFilter {
  "Checks if the value is equal to the given input."
  eq: Date
  "Checks if the value is greater than the given input."
  gt: Date
  "Checks if the value is greater than or equal to the given input."
  gte: Date
  "Checks if the value is lesser than the given input."
  lt: Date
  "Checks if the value is lesser than or equal to the given input."
  lte: Date
  "Checks if the value is not equal to the given input."
  neq: Date
}

input DatetimeFilter {
  "Checks if the value is equal to the given input."
  eq: DateTime
  "Checks if the value is greater than the given input."
  gt: DateTime
  "Checks if the value is greater than or equal to the given input."
  gte: DateTime
  "Checks if the value is lesser than the given input."
  lt: DateTime
  "Checks if the value is lesser than or equal to the given input."
  lte: DateTime
  "Checks if the value is not equal to the given input."
  neq: DateTime
}

input DocumentFilter {
  "All documents that are drafts."
  is_draft: Boolean
  "All documents referencing the given document ID."
  references: ID
}

input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}

input FileSorting {
  _key: SortOrder
  _type: SortOrder
}

input FloatFilter {
  "Checks if the value is equal to the given input."
  eq: Float
  "Checks if the value is greater than the given input."
  gt: Float
  "Checks if the value is greater than or equal to the given input."
  gte: Float
  "Checks if the value is lesser than the given input."
  lt: Float
  "Checks if the value is lesser than or equal to the given input."
  lte: Float
  "Checks if the value is not equal to the given input."
  neq: Float
}

input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  alt: FloatFilter
  lat: FloatFilter
  lng: FloatFilter
}

input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  alt: SortOrder
  lat: SortOrder
  lng: SortOrder
}

input IDFilter {
  "Checks if the value is equal to the given input."
  eq: ID
  in: [ID!]
  "Checks if the value matches the given word/words."
  matches: ID
  "Checks if the value is not equal to the given input."
  neq: ID
  nin: [ID!]
}

input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  crop: SanityImageCropFilter
  hotspot: SanityImageHotspotFilter
}

input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  crop: SanityImageCropSorting
  hotspot: SanityImageHotspotSorting
}

input IntFilter {
  "Checks if the value is equal to the given input."
  eq: Int
  "Checks if the value is greater than the given input."
  gt: Int
  "Checks if the value is greater than or equal to the given input."
  gte: Int
  "Checks if the value is lesser than the given input."
  lt: Int
  "Checks if the value is lesser than or equal to the given input."
  lte: Int
  "Checks if the value is not equal to the given input."
  neq: Int
}

input LocaleBlockContentFilter {
  _key: StringFilter
  _type: StringFilter
}

input LocaleBlockContentSorting {
  _key: SortOrder
  _type: SortOrder
}

input LocaleStringFilter {
  _key: StringFilter
  _type: StringFilter
  en: StringFilter
  es: StringFilter
  nb: StringFilter
}

input LocaleStringSorting {
  _key: SortOrder
  _type: SortOrder
  en: SortOrder
  es: SortOrder
  nb: SortOrder
}

input LocaleTextFilter {
  _key: StringFilter
  _type: StringFilter
  en: StringFilter
  es: StringFilter
  nb: StringFilter
}

input LocaleTextSorting {
  _key: SortOrder
  _type: SortOrder
  en: SortOrder
  es: SortOrder
  nb: SortOrder
}

input MainImageFilter {
  _key: StringFilter
  _type: StringFilter
  alt: StringFilter
  asset: SanityImageAssetFilter
  caption: StringFilter
  crop: SanityImageCropFilter
  hotspot: SanityImageHotspotFilter
}

input MainImageSorting {
  _key: SortOrder
  _type: SortOrder
  alt: SortOrder
  caption: SortOrder
  crop: SanityImageCropSorting
  hotspot: SanityImageHotspotSorting
}

input PostFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  mainImage: MainImageFilter
  publishedAt: DatetimeFilter
  slug: SlugFilter
  title: StringFilter
}

input PostSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  mainImage: MainImageSorting
  publishedAt: SortOrder
  slug: SlugSorting
  title: SortOrder
}

input ProductFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  blurb: LocaleStringFilter
  body: LocaleBlockContentFilter
  defaultProductVariant: ProductVariantFilter
  slug: SlugFilter
  title: StringFilter
  vendor: VendorFilter
}

input ProductSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  blurb: LocaleStringSorting
  body: LocaleBlockContentSorting
  defaultProductVariant: ProductVariantSorting
  slug: SlugSorting
  title: SortOrder
}

input ProductVariantFilter {
  _key: StringFilter
  _type: StringFilter
  barcode: BarcodeFilter
  grams: FloatFilter
  price: FloatFilter
  sku: StringFilter
  taxable: BooleanFilter
  title: StringFilter
}

input ProductVariantSorting {
  _key: SortOrder
  _type: SortOrder
  barcode: BarcodeSorting
  grams: SortOrder
  price: SortOrder
  sku: SortOrder
  taxable: SortOrder
  title: SortOrder
}

input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  id: StringFilter
  name: StringFilter
  url: StringFilter
}

input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  id: SortOrder
  name: SortOrder
  url: SortOrder
}

input SanityFileAssetFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  url: StringFilter
}

input SanityFileAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  url: SortOrder
}

input SanityImageAssetFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  metadata: SanityImageMetadataFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  url: StringFilter
}

input SanityImageAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  metadata: SanityImageMetadataSorting
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  url: SortOrder
}

input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
  top: FloatFilter
}

input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
  top: SortOrder
}

input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  aspectRatio: FloatFilter
  height: FloatFilter
  width: FloatFilter
}

input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  aspectRatio: SortOrder
  height: SortOrder
  width: SortOrder
}

input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  x: SortOrder
  y: SortOrder
}

input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  dimensions: SanityImageDimensionsFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
  location: GeopointFilter
  lqip: StringFilter
  palette: SanityImagePaletteFilter
}

input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  dimensions: SanityImageDimensionsSorting
  hasAlpha: SortOrder
  isOpaque: SortOrder
  location: GeopointSorting
  lqip: SortOrder
  palette: SanityImagePaletteSorting
}

input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
}

input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}

input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}

input SiteSettingsFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  author: AuthorFilter
  description: StringFilter
  title: StringFilter
}

input SiteSettingsSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  description: SortOrder
  title: SortOrder
}

input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
}

input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
}

input StringFilter {
  "Checks if the value is equal to the given input."
  eq: String
  in: [String!]
  "Checks if the value matches the given word/words."
  matches: String
  "Checks if the value is not equal to the given input."
  neq: String
  nin: [String!]
}

input VendorFilter {
  "Apply filters on document level"
  _: DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  logo: ImageFilter
  slug: SlugFilter
  title: StringFilter
}

input VendorSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  logo: ImageSorting
  slug: SlugSorting
  title: SortOrder
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date
